text.col = 4)
?calendR
calendR(year = 2022, month = 04, start_date = "2022-04-19",end_date = "2022-04-24",       # Año y mes
start = "M",                   # Empezar la semana en lunes
# Días en los que poner los textos
text.size = 2,               # Tamaño de fuente de los textos
text.col = 4)
calendR(year = 2022, month = 04, start_date = "2022-04-18",end_date = "2022-04-24",       # Año y mes
start = "M",                   # Empezar la semana en lunes
# Días en los que poner los textos
text.size = 2,               # Tamaño de fuente de los textos
text.col = 4)
calendR(year = 2022, month = 04, start_date = "2022-04-18",end_date = "2022-04-24", start = "M")
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M")
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = 18 )
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = "18" )
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = "2022-04-18" )
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = c("2022-04-18" ))
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = 2022-04-18)
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = c(2022-04-18)
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = c(2022-04-18))
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = 18)
calendR(start_date = "2022-04-18",end_date = "2022-04-24", start = "M",special.days = 1)
df_plan[1,"fecha"]
df_plan <- dbFetch(plan_semanal) %>% as.data.frame()
library(tidyverse)
library(calendR)
library(tidyverse)
library(RMariaDB)
con <- dbConnect(
drv = RMariaDB::MariaDB(),
username = "root",
password = "sofia",
host = "localhost",
port = 3306,
dbname = "menus"
)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame()
df_plan[1,"fecha"]
calendR(start_date = min(df_plan$fecha),end_date = "2022-04-24", start = "M",special.days = 1)
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M",special.days = 1)
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% rownam
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% rownames_to_column()
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% rownames_to_column(var= "id_dia")
df_plan
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% rownames_to_column(var= "id_dia")
df_plan
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% mutate(id_dia = row_number(fecha))
df_plan
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% mutate(id_dia = row_number(fecha))
df_plan
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% summarise(fecha)
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% summarise(unique(fecha))
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% summarise(unique(fecha))
df_plan
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% group_indices(fecha)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% group_indices(fecha)
df_plan
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% mutate(id_dia = group_indices(fecha))
df_plan
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha) %>% mutate(id_dia = group_indices(fecha))
df_plan
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha)
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha)
df_plan
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha)
df_plan
df_plan$id_dia <- group_indices(fecha)
df_plan$id_dia <- group_indices(df_plan$fecha)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha)
df_plan$id_dia <- df_plan %>% group_indices(fecha)
df_plan
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = df_plan$descripcion, text.pos = df_plan$id_dia)
df_plan$descripcion[1]
df_plan$id_dia[1]
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = df_plan$descripcion[1], text.pos = df_plan$id_dia[1])
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = "hola", text.pos = df_plan$id_dia[1])
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = "hola", text.pos = 1)
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = "hola", text.pos = 19)
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = c("Deporte", "Deporte"), text.pos = c(1,2))
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = c("Deporte", "Deporte"), text.pos = c(1,2))
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), special.day = 1,start = "M", text = c("Deporte", "Deporte"), text.pos = c(1,2))
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = c("Deporte", "Deporte"), text.pos = c(1,2))
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", text = c("Deporte", "Deporte"), text.pos = c(91,20))
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M")
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", orientation = "l")
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", orientation = "p")
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 12)
library(gadenbuie/ggweekly)
library(ggweekly)
install.packages("ggweekly")
devtools::install_github("gadenbuie/ggweekly")
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = "2019-04-01",
end_day = "2019-06-30",
)
library(ggweekly)
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = "2019-04-01",
end_day = "2019-06-30",
)
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = min(df_plan$fecha),
end_day = "2019-06-30",
)
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = min(df_plan$fecha),
end_day = max(df_plan$fecha),
)
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = min(df_plan$fecha),
end_day = max(df_plan$fecha),
)+geom_text("hola")
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = min(df_plan$fecha),
end_day = max(df_plan$fecha),
)+
# Create a standard calendar
ggweek_planner(
start_day = "2019-04-01",
end_day = "2019-06-30",
show_month_boundaries = FALSE,
show_month_start_day = FALSE,
week_start = "isoweek",
week_start_label = "week"
) +
ggplot2::ggtitle("2019") +
ggplot2::facet_wrap(~ month, scales = 'free')
# Create a standard calendar
ggweek_planner(
start_day = "2019-04-01",
end_day = "2019-06-30",
show_month_boundaries = FALSE,
show_month_start_day = FALSE,
week_start = "isoweek",
week_start_label = "week"
) +
ggplot2::ggtitle("2019") +
ggplot2::facet_wrap(~ month, scales = 'free')
## Not run:
# Create a weekly planner
ggweek_planner(
start_day = min(df_plan$fecha),
end_day = max(df_plan$fecha),
)
calendR(start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 12)
calendR(start_date = "2022-04-19",end_date = max(df_plan$fecha), start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 12)
calendR(start_date = "2022-04-19",end_date = "2022-04-23", start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 12)
calendR(month = 4, year = 2022 start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 12)
calendR(month = 4, year = 2022, start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 12)
calendR(month = 4, year = 2022, start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = 19 start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = 19, start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = 19,end_date = 23 start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = 19,end_date = 23, start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = 2022-04-19,end_date = 23, start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = 2022-04-19,end_date = 2022-04-23, start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = as.Date(2022-04-19),end_date = as.Date(2022-04-23), start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
as.Date(2022-04-19
as.Date(2022-04-19)
as.Date(2022-04-19)
calendR(month = 4, year = 2022, start_date = as.Date("2022-04-19"),end_date = as.Date("2022-04-23"), start = "M", orientation = "p", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = as.Date("2022-04-19"),end_date = as.Date("2022-04-23"), start = "M", orientation = "l", text = "hola", text.pos = 1, text.size = 4)
calendR(start_date = as.Date("2022-04-19"),end_date = as.Date("2022-04-23"), start = "M", orientation = "l", text = "hola", text.pos = 1, text.size = 4)
month = 4, year = 2022,
calendR(month = 4, year = 2022, start_date = as.Date("2022-04-19"),end_date = as.Date("2022-04-23"), start = "M", orientation = "l", text = "hola", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", orientation = "l", text = , text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = min(df_plan$fecha),end_date = max(df_plan$fecha), start = "M", orientation = "l", text = "ho", text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = min(df_plan$fecha),end_date = max(df_plan$fecha),  orientation = "l", text = , text.pos = 1, text.size = 4)
calendR(month = 4, year = 2022, start_date = min(df_plan$fecha),end_date = max(df_plan$fecha),  orientation = "l", text = df_plan$descripcion[1], text.pos = 1, text.size = 4)
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha)
df_plan
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% group_by(fecha)
df_plan
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion")
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion")
df_plan
View(df_plan)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% rotate_df()
library(sjmisc)
install.packages("sjmisc")
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% rotate_df()
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df()
?rotate_df()
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
rows <- c("desayuno","colacion1","comida","colacion2","cena","colacion3")
df_plan[rows,]
df_plan[rows,] %>% view()
menu <- df_plan[rows,]
menu
flextable::flextable(menu)
menu <- df_plan[rows,] %>% rownames_to_column(var = "Horario")
flextable::flextable(menu)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 2, part = "all") %>%
padding(padding = 6, part = "header")
library(flextable)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 2, part = "all") %>%
padding(padding = 6, part = "header")
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header")
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header")
?bg()
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1)
menu$Horario <- c("Desayuno","Colación 1","Comida","Colacion 2","Cena","Colacion 3")
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1)
menu$Horario <- c("Desayuno","Colación 1","Comida","Colación 2","Cena","Colación 3")
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% mutate(dia_sem = weekdays(as.Date(fecha)))%>% pivot_wider(id_cols = "fecha",names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
df_plan
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% mutate(dia_sem = weekdays(as.Date(fecha)))%>% pivot_wider(id_cols = c("dia_sem"),names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
View(df_plan)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% mutate(dia_sem = weekdays(as.Date(fecha)))%>% pivot_wider(id_cols = c("dia_sem"),names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% mutate(dia_sem = weekdays(as.Date(fecha)))%>% pivot_wider(id_cols = c("dia_sem"),names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
View(df_plan)
rows <- c("desayuno","colacion1","comida","colacion2","cena","colacion3")
menu <- df_plan[rows,] %>% rownames_to_column(var = "Horario")
menu$Horario <- c("Desayuno","Colación 1","Comida","Colación 2","Cena","Colación 3")
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1)
table <- flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1)
print(table, preview = "pdf")
knitr_print(table, "pdf")
knit_print(table, "pdf")
rmd_file <- tempfile(fileext = ".Rmd")
rmd_file <- tempfile(fileext = ".Rmd")
file.copy(table, to = rmd_file, overwrite = TRUE)
file.copy(from =table, to = rmd_file, overwrite = TRUE)
rmd_file <- tempfile(table,fileext = ".Rmd")
?file.copy
knitr::knit_print(table)
knitr::knit_print(table,"pdf")
knitr::knit_print.flextable(table,"pdf")
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>% fit_to_width(width = 20)
fit_to_width()
?fit_to_width
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(width = 20)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(max_width = 20,inc = 0.3)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(max_width = 5,inc = 0.9)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(max_width = 5,inc = 0.1)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(max_width = 5,inc = 1)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(max_width = 10,inc = 1)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% fit_to_width(max_width = 10,inc = .1)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>%autofit() %>% width(width = 10)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>% width(width = 4) %>% fit_to_width(max_width = 4)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>% width(width = 5, unit = "in")
set_flextable_defaults(font.size = 11)
lista <- dbSendQuery(conn = con, "select  ingredientes.descripcion, ingredientes_recetas.codigo_ingredientes, sum(ingredientes.cant), ingredientes.unidades from plan_semanal
left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta
left join ingredientes_recetas on ingredientes_recetas.codigo_receta = plan_semanal.codigo_receta
left join ingredientes on ingredientes_recetas.codigo_ingredientes = ingredientes.codigo_ingredientes
group by ingredientes.codigo_ingredientes ")
dbFetch(lista)
lista <- dbSendQuery(conn = con, "select  ingredientes.descripcion, ingredientes_recetas.codigo_ingredientes, sum(ingredientes.cant), ingredientes.unidades from plan_semanal
left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta
left join ingredientes_recetas on ingredientes_recetas.codigo_receta = plan_semanal.codigo_receta
left join ingredientes on ingredientes_recetas.codigo_ingredientes = ingredientes.codigo_ingredientes
group by ingredientes.codigo_ingredientes ")
dbFetch(lista)
## Generación de menú semanal.
library(calendR)
library(tidyverse)
library(RMariaDB)
library(sjmisc)
library(flextable)
con <- dbConnect(
drv = RMariaDB::MariaDB(),
username = "root",
password = "sofia",
host = "localhost",
port = 3306,
dbname = "menus"
)
plan_semanal <- dbSendQuery(conn = con, "select plan_semanal.fecha, plan_semanal.tipo_comida, recetas.descripcion, recetas.adjunto_receta  from plan_semanal left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta ")
df_plan <- dbFetch(plan_semanal) %>% as.data.frame() %>% mutate(dia_sem = weekdays(as.Date(fecha)))%>% pivot_wider(id_cols = c("dia_sem"),names_from = "tipo_comida", values_from = "descripcion") %>% sjmisc::rotate_df(cn = T)
rows <- c("desayuno","colacion1","comida","colacion2","cena","colacion3")
menu <- df_plan[rows,] %>% rownames_to_column(var = "Horario")
menu$Horario <- c("Desayuno","Colación 1","Comida","Colación 2","Cena","Colación 3")
FitFlextableToPage <- function(ft, pgwidth = 6){
ft_out <- ft %>% autofit()
ft_out <- width(ft_out, width = dim(ft_out)$widths*pgwidth /(flextable_dim(ft_out)$widths))
return(ft_out)
}
set_flextable_defaults(font.size = 8)
flextable::flextable(menu) %>%  align(align = "center", part = "all") %>%
line_spacing(space = 1.15, part = "all") %>%
padding(padding = 6, part = "header") %>% bg(bg = "gray", part = "header") %>%  bg(bg = "gray", j = 1) %>% width(width = 0.9, unit = "in")
lista <- dbSendQuery(conn = con, "select  ingredientes.descripcion, ingredientes_recetas.codigo_ingredientes, sum(ingredientes.cant), ingredientes.unidades from plan_semanal
left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta
left join ingredientes_recetas on ingredientes_recetas.codigo_receta = plan_semanal.codigo_receta
left join ingredientes on ingredientes_recetas.codigo_ingredientes = ingredientes.codigo_ingredientes
group by ingredientes.codigo_ingredientes ")
dbFetch(lista)
flextable::flextable(dbFetch(lista))
lista <- dbSendQuery(conn = con, "select  ingredientes.descripcion, ingredientes_recetas.codigo_ingredientes, sum(ingredientes.cant), ingredientes.unidades from plan_semanal
left join recetas on plan_semanal.codigo_receta = recetas.codigo_receta
left join ingredientes_recetas on ingredientes_recetas.codigo_receta = plan_semanal.codigo_receta
left join ingredientes on ingredientes_recetas.codigo_ingredientes = ingredientes.codigo_ingredientes
group by ingredientes.codigo_ingredientes ")
flextable::flextable(dbFetch(lista))
lista <- dbSendQuery(conn = con, "
select
ingredientes.descripcion as Ingredientes,
sum(programa.numero_porciones) as Porciones,
sum(ingredientes.cant) as Cantidad,
ingredientes.unidades as Unidades
from plan_semanal
left join programa on plan_semanal.tipo_comida = programa.tipo_comida
left join ingredientes_recetas on plan_semanal.codigo_receta = ingredientes_recetas.codigo_receta
left join ingredientes on ingredientes_recetas.codigo_ingredientes = ingredientes.codigo_ingredientes
group by ingredientes.codigo_ingredientes ")
list <- dbFetch(lista)
names(list) <- c("Ingrediente","codigo","cantidad","unidades")
library(googlesheets4)
library(tidyverse)
library(googlesheets4)
library(tidyverse)
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1UdyKIrGpPokuu7wPDvaV5sIyasAs5awz/edit?usp=sharing&ouid=110227106175373470000&rtpof=true&sd=true",sheet = "Hoja1")
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1UdyKIrGpPokuu7wPDvaV5sIyasAs5awz/edit?usp=sharing&ouid=110227106175373470000&rtpof=true&sd=true",sheet = "Hoja1")
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1")
View(ej_admid)
dim(ej_admid)
sum(is.na(ej_admid))
sum(is.na(ej_admid$ID))
apply(ej_admid,2,function(x)sum(is.na(x)))
sapply(ej_admid,2,function(x)sum(is.na(x)))
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1")%>% make.names()
apply(ej_admid,2,function(x)sum(is.na(x)))
apply(ej_admid,2,function(x)sum(is.na(x)))
ej_admid
?make.names
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1")
make.names(names(ej_admid))
?read_sheet
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T, na="NA")
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
apply(ej_admid,2,function(x)sum(is.na(x)))
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
apply(ej_admid,2,function(x)sum(is.na(x)))
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
apply(ej_admid,2,function(x)sum(is.na(x)))
ej_admid %>% filter(is.na(Grados1)|is.na(Grados2)|is.na(Minutos1)|is.na(Minutos2)|is.na(Segundos1)|is.na(Segundos2))
ej_admid %>% filter(is.na(Grados1)|is.na(Grados2)|is.na(Minutos1)|is.na(Minutos2)|is.na(Segundos1)|is.na(Segundos2))%>% view
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
ej_admid %>% filter(is.na(Grados1)|is.na(Grados2)|is.na(Minutos1)|is.na(Minutos2)|is.na(Segundos1)|is.na(Segundos2)|is.na(LonGD)|is.na(LatGD))%>% view
ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))%>% view
# Hay 90 registros sin coordenadas
filt1 <- ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))%>% view
# Hay 90 registros sin coordenadas
filt1_coor <- ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))%>% view
# Hay 90 registros sin coordenadas
filt1_coor <- ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))
# Hay 90 registros sin coordenadas
filt1_coor <- ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))
ej_admid %>% filter(ID != filt1_coor$ID)
filt1_coor$ID
ej_admid %>% filter(ID != filt1_coor$ID)
ej_admid %>% filter(!ID %in% filt1_coor$ID)
con_coor <- ej_admid %>% filter(!ID %in% filt1_coor$ID)
con_coor <- ej_admid %>% filter(!ID %in% filt1_coor$ID)
View(con_coor)
apply(con_coor,2,function(x)sum(is.na(x)))
apply(con_coor,2,function(x)sum(is.na(x))/317*100)
apply(con_coor,2,function(x)sum(is.na(x))/317*100) %>% as.data.frame()
apply(con_coor,2,function(x)sum(is.na(x))) %>% as.data.frame()
con_coor[is.na(con_coor$LatGD),]
con_coor[is.na(con_coor$LatGD),] %>% mutate(LatDG=Grados1+Minutos1/60+Segundos1/3600,
LonDG=Grados2+Minutos2/60+Segundos2/3600)
con_coor[is.na(con_coor$LatGD),] %>% mutate(LatDG=Grados1+Minutos1/60+Segundos1/3600,
LonDG=Grados2+Minutos2/60+Segundos2/3600) %>% view
con_coor[is.na(con_coor$LatGD),] %>% mutate(LatGD=Grados1+Minutos1/60+Segundos1/3600,
LonGD=Grados2+Minutos2/60+Segundos2/3600) %>% view
con_coor[LonGD>0,]
con_coor[con_coorLonGD>0,]
con_coor[con_coor$LonGD>0,]
con_coor[which(con_coor$LonGD>0),]
View(con_coor)
con_coor[which(con_coor$LonGD>0),]$LonGD <- con_coor$LonGD *-1
con_coor[which(con_coor$LonGD>0),"LonGD"]
con_coor[which(con_coor$LonGD>0),"LonGD"] <- con_coor[which(con_coor$LonGD>0),"LonGD"] *-1
con_coor[which(con_coor$Grados2>0),"Grados2"] <- con_coor[which(con_coor$Grados2>0),"Grados2"] *-1
con_coor[is.na(con_coor$LatGD),] %>% mutate(LatGD=Grados1+Minutos1/60+Segundos1/3600,
LonGD=Grados2+Minutos2/60+Segundos2/3600) %>% view
con_coor[is.na(con_coor$LatGD),] <- con_coor[is.na(con_coor$LatGD),] %>% mutate(LatGD=Grados1+Minutos1/60+Segundos1/3600, LonGD=Grados2+Minutos2/60+Segundos2/3600)
##
apply(con_coor,2,function(x)sum(is.na(x))) %>% as.data.frame()
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
# Hay 90 registros sin coordenadas
filt1_coor <- ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))
# Asignar coordenadas decimales para todos
con_coor <- ej_admid %>% filter(!ID %in% filt1_coor$ID)
## Corregir longitudes > 0
con_coor[which(con_coor$LonGD>0),"LonGD"] <- con_coor[which(con_coor$LonGD>0),"LonGD"] *-1
con_coor[which(con_coor$Grados2>0),"Grados2"] <- con_coor[which(con_coor$Grados2>0),"Grados2"] *-1
## Convertir coordenadas Gdos, min, seg a grados decimales
con_coor[is.na(con_coor$LatGD),] <- con_coor[is.na(con_coor$LatGD),] %>% mutate(LatGD=Grados1+Minutos1/60+Segundos1/3600, LonGD=Grados2+Minutos2/60+Segundos2/3600)
##
apply(con_coor,2,function(x)sum(is.na(x))) %>% as.data.frame()
setwd("~/Documents/Laboratorio_bioNeo/Ejemplares/bin")
con_coor %>% select(ID,LatGD,LonGD) %>% write.csv("../outputs/admid_revisar_coord_190422.csv")
ej_admid <- read_sheet("https://docs.google.com/spreadsheets/d/1wvnoiju2UjHW3QezTI0kvmReMf8_adq5mSQEpWRdpk8/edit?usp=sharing",sheet = "Hoja1",col_names = T)
# Hay 90 registros sin coordenadas
filt1_coor <- ej_admid %>% filter(is.na(Grados1)&is.na(Grados2)&is.na(Minutos1)&is.na(Minutos2)&is.na(Segundos1)&is.na(Segundos2)&is.na(LonGD)&is.na(LatGD))
# Asignar coordenadas decimales para todos
con_coor <- ej_admid %>% filter(!ID %in% filt1_coor$ID)
## Corregir longitudes > 0
con_coor[which(con_coor$LonGD>0),"LonGD"] <- con_coor[which(con_coor$LonGD>0),"LonGD"] *-1
con_coor[which(con_coor$Grados2>0),"Grados2"] <- con_coor[which(con_coor$Grados2>0),"Grados2"] *-1
## Convertir coordenadas Gdos, min, seg a grados decimales
con_coor[is.na(con_coor$LatGD),] <- con_coor[is.na(con_coor$LatGD),] %>% mutate(LatGD=Grados1+Minutos1/60+Segundos1/3600, LonGD=(abs(Grados2)+Minutos2/60+Segundos2/3600)*-1)
library(maptools)
con_coor %>% select(ID,LatGD,LonGD) %>% mixedsort(ID) %>% write.csv("../outputs/admid_revisar_coord_190422.csv")
library(gtools)
con_coor %>% select(ID,LatGD,LonGD) %>% mixedsort(ID) %>% write.csv("../outputs/admid_revisar_coord_190422.csv")
con_coor %>% select(ID,LatGD,LonGD) %>% mixedsort(.$ID) %>% write.csv("../outputs/admid_revisar_coord_190422.csv")
con_coor %>% select(ID,LatGD,LonGD) %>% arrange(mixedsort(.$ID)) #%%>% write.csv("../outputs/admid_revisar_coord_190422.csv")
con_coor %>% select(ID,LatGD,LonGD) %>% arrange(mixedsort(.$ID)) %>% write.csv("../outputs/admid_revisar_coord_190422.csv")
con_coor %>% select(ID,LatGD,LonGD) %>% arrange(mixedsort(.$ID)) %>% write.csv("../outputs/admid_revisar_coord_190422.csv", row.names = F)
con_coor %>% select(ID,LatGD,LonGD) %>% arrange(mixedsort(.$ID))
con_coor %>% select(ID,LatGD,LonGD) %>% arrange(mixedorder(.$ID))
rev <- con_coor %>% select(ID,LatGD,LonGD)
rev[mixedsort(rev$ID),]
mixedsort(rev$ID)
rev[mixedsort(rev$ID),]
rev[mixedsort(rev$ID)]
rev <- con_coor %>% select(ID,LatGD,LonGD) %>% arrange(mixedrank(ID))
rev <- con_coor %>% select(ID,LatGD,LonGD) %>% arrange(dplyr::mixedrank(ID))
rev <- con_coor %>% select(ID,LatGD,LonGD) %>% dplyr::arrange(mixedsort(ID))
View(rev)
View(rev)
rev <- con_coor %>% select(ID,LatGD,LonGD) %>% dplyr::arrange(mixedorder(ID))
rev[mixedorder(as.character(rev$ID))]
rev[mixedsort(as.character(rev$ID))]
rev[mixedsort(as.character(rev$ID)),]
mixedsort(as.character(rev$ID))
mixedorder(rev$ID)
rev[mixedorder(rev$ID)]
rev[mixedorder(rev$ID),]
rev <- con_coor %>% select(ID,LatGD,LonGD) %>% dplyr::arrange(mixedorder(ID)) %>% .[mixedorder(.$ID),]
rev <- con_coor %>% select(ID,LatGD,LonGD) %>% dplyr::arrange(mixedorder(ID)) %>% .[mixedorder(.$ID),] %>% write.csv("../outputs/admid_revisar_coord_190422.csv", row.names = F)
con_coor %>% select(ID,LatGD,LonGD) %>% dplyr::arrange(mixedorder(ID)) %>% .[mixedorder(.$ID),] %>% write.csv("../outputs/admid_revisar_coord_190422.csv", row.names = F)
con_coor
con_coor %>% group_by(Especie)%>% summarise(numero_ejemplares = n())
con_coor %>% group_by(Especie)%>% summarise(numero_ejemplares = n()) %>% View
con_coor %>% group_by(Especie)%>% summarise(numero_ejemplares = n()) %>% View
